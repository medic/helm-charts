{{- if and (eq .Values.cluster_type "gke") (eq (toString .Values.couchdb_data.preExistingDataAvailable) "true") }}
{{- if eq (toString .Values.couchdb.clusteredCouch_enabled) "false" }}
# Single node persistent volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: couchdb-pv-{{ .Values.namespace }}
spec:
  capacity:
    storage: {{ .Values.couchdb.persistent_disk.size }}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: {{ .Values.couchdb.persistent_disk.diskName }}
    fsType: ext4
    partition: {{ .Values.couchdb_data.partition | default "0" }}
{{- else }}
# Multi-node persistent volumes
{{- range $i, $e := until (int .Values.clusteredCouch.noOfCouchDBNodes) }}
{{ $nodeNumber := add $i 1 }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: couchdb-pv-{{ $.Values.namespace }}-{{ $nodeNumber }}
spec:
  capacity:
    storage: {{ $.Values.couchdb.couchdb_node_storage_size }}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  gcePersistentDisk:
    pdName: {{ index $.Values.couchdb.persistent_disk (printf "diskName-%d" $nodeNumber) }}
    fsType: ext4
    partition: {{ $.Values.couchdb_data.partition | default "0" }}
--- #Don't remove the separator. We need this to separate yamls generated by the range command.
{{- end }}
{{- end }}
{{- end }}
